{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\mista\\\\Desktop\\\\GHrepos\\\\Google-Search-API\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\mista\\\\Desktop\\\\GHrepos\\\\Google-Search-API\\\\client\\\\src\\\\pages\\\\Search.js\";\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport SaveBtn from \"../components/SaveBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, FormBtn } from \"../components/Form\";\n\nfunction Search() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      booksResult = _useState4[0],\n      setbooksResult = _useState4[1]; // Load all books and store them with setBooks\n\n\n  useEffect(function () {\n    loadBooks();\n  }, []); // Loads all books and sets them to books\n\n  function loadBooks() {\n    API.getBooks().then(function (res) {\n      return setBooks(res.data);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  ; // Deletes a book from the database with a given id, then reloads books from the db\n\n  function deleteBook(id) {\n    API.deleteBook(id).then(function (res) {\n      return loadBooks();\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  } // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    var book = event.target.value;\n    setBooks(book);\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    API.searchBooks(books).then(function (res) {\n      setbooksResult(res.data.items);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"Search for a Book\")), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"title\",\n    placeholder: \"Title (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn, {\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, \"Search\")))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, books.length ? /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, booksResult.map(function (book) {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: book.etag,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/books/\" + book._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 23\n      }\n    }, book.volumeInfo.title, \" by \", book.volumeInfo.authors)), /*#__PURE__*/React.createElement(SaveBtn, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(DeleteBtn, {\n      onClick: function onClick() {\n        return deleteBook(book._id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }));\n  })) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, \"No Results to Display\"))));\n}\n\nexport default Search;","map":{"version":3,"sources":["C:/Users/mista/Desktop/GHrepos/Google-Search-API/client/src/pages/Search.js"],"names":["React","useState","useEffect","DeleteBtn","SaveBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","FormBtn","Search","books","setBooks","booksResult","setbooksResult","loadBooks","getBooks","then","res","data","catch","err","console","log","deleteBook","id","handleInputChange","event","book","target","value","handleFormSubmit","preventDefault","searchBooks","items","length","map","etag","_id","volumeInfo","title","authors"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport DeleteBtn from \"../components/DeleteBtn\";\r\nimport SaveBtn from \"../components/SaveBtn\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\nimport { Input, FormBtn } from \"../components/Form\";\r\nfunction Search() {\r\n    const [books, setBooks] = useState([])\r\n    const [booksResult, setbooksResult] = useState([])\r\n    // Load all books and store them with setBooks\r\n    useEffect(() => {\r\n      loadBooks()\r\n    }, [])\r\n    // Loads all books and sets them to books\r\n    function loadBooks() {\r\n      API.getBooks()\r\n        .then(res => \r\n          setBooks(res.data)\r\n        )\r\n        .catch(err => console.log(err));\r\n    };\r\n    // Deletes a book from the database with a given id, then reloads books from the db\r\n    function deleteBook(id) {\r\n      API.deleteBook(id)\r\n        .then(res => loadBooks())\r\n        .catch(err => console.log(err));\r\n    }\r\n    // Handles updating component state when the user types into the input field\r\n    function handleInputChange(event) {\r\n        const book = event.target.value;\r\n        setBooks(book);\r\n    };\r\n    // When the form is submitted, use the API.saveBook method to save the book data\r\n    // Then reload books from the database\r\n    function handleFormSubmit(event) {\r\n      event.preventDefault();\r\n      API.searchBooks(books)\r\n      .then((res) => {\r\n        setbooksResult(res.data.items);\r\n      })\r\n      .catch((err) => console.log(err));\r\n    };\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col size=\"md-12\">\r\n          <Jumbotron>\r\n            <h1>Search for a Book</h1>\r\n          </Jumbotron>\r\n          <form onSubmit={handleFormSubmit}>\r\n            <Input\r\n              onChange={handleInputChange}\r\n              name=\"title\"\r\n              placeholder=\"Title (required)\"\r\n            />\r\n            <FormBtn\r\n              onClick={handleFormSubmit}\r\n            >\r\n              Search\r\n            </FormBtn>\r\n          </form>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n          <Col size=\"md-12\">\r\n          {books.length ? (\r\n              <List>\r\n                {booksResult.map(book => (\r\n                  <ListItem key={book.etag}>\r\n                    <Link to={\"/books/\" + book._id}>\r\n                      <strong>\r\n                        {book.volumeInfo.title} by {book.volumeInfo.authors}\r\n                      </strong>\r\n                    </Link>\r\n                    <SaveBtn />\r\n                    <DeleteBtn onClick={() => deleteBook(book._id)} />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            ) : (\r\n              <h3>No Results to Display</h3>\r\n            )}\r\n\r\n          </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\nexport default Search;"]},"metadata":{},"sourceType":"module"}